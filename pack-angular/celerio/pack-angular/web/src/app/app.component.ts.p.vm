$output.file("web/src/app/app.component.ts")##
import { Component, OnInit } from '@angular/core';
import 'rxjs/add/observable/throw';
import { Message, MenuItem } from 'primeng/primeng';
import { AuthService} from './service/auth.service';
import { MessageService} from './service/message.service';

/**
 * The Root component.
 * Defines the main layout and handles user login in a dialog.
 */
@Component({
  selector: 'app-root',
  templateUrl: 'app.component.html',
  styles: [`
    .layout div {
      background-color: white;
      border: 1px solid #f5f7f8;
    }
  `]
})
export class AppComponent implements OnInit {
    items: MenuItem[] = [{label: 'hello'}];
    msgs: Message[] = [];

    displayLoginDialog = false;
    loginFailed = false;
    authenticated = false;
    j_username = 'admin';
    j_password = 'admin';

    constructor(private authService: AuthService, private messageService: MessageService) {
        messageService.messageSource${d}.subscribe(msg => this.msgs.push(msg));
    }

    ngOnInit() {
        this.items = [
            { label: 'Home', routerLink: ['/'], icon: 'fa-home' },

            { label: 'Entities', icon: 'fa-search', items: [
#foreach($entity in $project.withoutManyToManyJoinEntities.list)
          {
            label: '${entity.model.type}',
            items: [
              {label: 'Search', routerLink: ['/${entity.model.var}-list']},
              {label: 'Create', routerLink: ['/${entity.model.var}/new']}
            ]
          }#if($velocityHasNext),
#end
#end
                ]
            },
            { label: 'Swagger', url : '/swagger-ui.html', icon: 'fa-gear' },
            { label: 'Documentation',
                icon: 'fa-book',
                items: [
                    {label: 'Source code', icon: 'fa-github-alt', url: 'https://github.com/jaxio/celerio-angular-quickstart'},
                    {label: 'Celerio Documentation', icon: 'fa-external-link', url: 'http://www.jaxio.com/documentation/celerio/'},
                    {label: 'Angular Cli', icon: 'fa-external-link', url: 'https://cli.angular.io/'},
                    {label: 'Angular 5', icon: 'fa-external-link', url: 'https://angular.io/'},
                    {label: 'Material 5', icon: 'fa-external-link', url: 'https://material.angular.io/'},
                    {label: 'PrimeNG Showcase', icon: 'fa-external-link', url: 'http://www.primefaces.org/primeng'},
                    {label: 'TypeScript', icon: 'fa-external-link', url: 'https://www.typescriptlang.org/'},
                    {label: 'Spring Boot', icon: 'fa-external-link', url: 'http://projects.spring.io/spring-boot/'},
                    {label: 'Spring Data JPA', icon: 'fa-external-link', url: 'http://projects.spring.io/spring-data-jpa/'}
                ]
            }
        ];

        this.authService.isAuthenticated().
            subscribe(
                resp => {
                        this.authenticated = resp;
                        this.displayLoginDialog = !this.authenticated;
                        if (this.authenticated) {
                            this.items.push({label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                            console.log('You are authenticated...', '');
                        } else {
                            console.log('You are NOT authenticated...', '');
                        }
                    },
                error =>  this.messageService.error('isAuthenticated Error', error)
            );
    }

    login() {
        this.authService.login(this.j_username, this.j_password).
            subscribe(
                loginOk => {
                    if (loginOk) {
                        this.displayLoginDialog = false;
                        this.authenticated = true;
                        this.items.push({label: 'Sign out', url: '/api/logout', icon: 'fa-sign-out' });
                        this.loginFailed = false;
                        this.messageService.info('You are now logged in.', '');
                    } else {
                        this.loginFailed = true;
                        this.displayLoginDialog = true;
                        this.authenticated = false;
                    }
                },
                error => {
                    this.messageService.error('Login error', error);
                    this.loginFailed = true;
                    this.displayLoginDialog = true;
                    this.authenticated = false;
                }
        );
    }
}
