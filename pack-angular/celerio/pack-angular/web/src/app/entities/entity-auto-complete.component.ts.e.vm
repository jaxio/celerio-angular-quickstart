$output.file("web/src/app/entities/${entity.model.var}/${entity.model.var}-auto-complete.component.ts")##
import {Component, Input, forwardRef} from '@angular/core';
import {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';
import {MessageService} from '../../service/message.service';
import {${entity.model.type}} from './${entity.model.var}';
import {${entity.service.type}} from './${entity.model.var}.service';

// Resource: http://almerosteyn.com/2016/04/linkup-custom-control-to-ngcontrol-ngmodel

export const ${entity.model.type.toUpperCase()}_AUTO_COMPLETE_CONTROL_VALUE_ACCESSOR: any = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => ${entity.model.type}CompleteComponent),
    multi: true
};

@Component({
  templateUrl: '${entity.model.var}-auto-complete.component.html',
  selector: 'app-${entity.model.var}-auto-complete',
  providers: [${entity.model.type.toUpperCase()}_AUTO_COMPLETE_CONTROL_VALUE_ACCESSOR]
})
export class ${entity.model.type}CompleteComponent implements ControlValueAccessor {
    @Input() disabled = false;
    @Input() id: string;
    @Input() name: string;

    // The internal data model
    private _value: $entity.model.type = null;

    public suggestions: ${entity.model.type}[] = [];

    // Placeholders for the callbacks
    private _onTouchedCallback: () => void = () => {};
    private _onChangeCallback: (_: any) => void = () => {};

    constructor(private $entity.service.var: ${entity.service.type}, private messageService: MessageService) {
    }

    @Input()
    get value(): any { return this._value; }

    // set accessor including call the onchange callback
    set value(v: any) {
        if (this._value != null && !v) {
            this.select(null);
        }
        // nop, see writeValue and select method
    }

    // Set touched on blur
    onTouched() {
        this._onTouchedCallback();
    }

    // From ControlValueAccessor interface
    writeValue(value: any) {
        this._value = <$entity.model.type> value;
    }

    // From ControlValueAccessor interface
    registerOnChange(fn: any) {
        this._onChangeCallback = fn;
    }

    // From ControlValueAccessor interface
    registerOnTouched(fn: any) {
        this._onTouchedCallback = fn;
    }

    // From ControlValueAccessor interface
    setDisabledState(isDisabled: boolean) {
    }

    complete(event: any) {
        this.${entity.service.var}.complete(event.query).
            subscribe(
                results => this.suggestions = results,
                error => this.messageService.error(error, 'Error during auto-complete')
            );
    }

    select(v: any) {
        this._value = v;
        this._onChangeCallback(v);
    }
}
