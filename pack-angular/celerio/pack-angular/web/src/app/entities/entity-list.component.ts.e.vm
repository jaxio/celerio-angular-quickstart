$output.file("web/src/app/entities/${entity.model.var}/${entity.model.var}-list.component.ts")##
import { Component, Input, Output, OnChanges, EventEmitter, SimpleChanges} from '@angular/core';
import { Router } from '@angular/router';
import { DataTable, LazyLoadEvent } from 'primeng/primeng';
import { PageResponse } from '../../support/paging';
import { MessageService } from '../../service/message.service';
import { MatDialog } from '@angular/material';
import { ConfirmDeleteDialogComponent } from '../../support/confirm-delete-dialog.component';
import { $entity.model.type } from './${entity.model.var}';
import { $entity.service.type } from './${entity.model.var}.service';
#set($imports = [])
#foreach ($relation in $entity.xToOne.list)
#if(!$imports.contains($relation.to.type))
#if(!$relation.to.type.equals($entity.model.type))
import { $relation.to.type } from '../$relation.toEntity.model.var/$relation.toEntity.model.var';
#end
#set($temp = $imports.add($relation.to.type))
#end
#end

@Component({
  templateUrl: '${entity.model.var}-list.component.html',
  // selector: '${entity.model.var}-list'
})
export class ${entity.model.type}ListComponent implements OnChanges {

    @Input() header = '${entity.model.varsUp}...';

    // When 'sub' is true, it means this list is used as a one-to-many list.
    // It belongs to a parent entity, as a result the addNew operation
    // must prefill the parent entity. The prefill is not done here, instead we
    // emit an event.
    // When 'sub' is false, we display basic search criterias
    @Input() sub: boolean;
    @Output() addNewClicked = new EventEmitter();

    ${entity.model.var}ToDelete: $entity.model.type;

    // basic search criterias (visible if not in 'sub' mode)
    example: $entity.model.type = new ${entity.model.type}();

    // list is paginated
    currentPage: PageResponse<$entity.model.type> = new PageResponse<$entity.model.type>(0, 0, []);

## --------------- Many to One
#foreach ($relation in $entity.forwardXToOne.list)
#if ($velocityCount == 1)
    // X to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
#end
    private _$relation.to.var: $relation.to.type;
#end

    constructor(private router: Router,
        private $entity.service.var: $entity.service.type,
        private messageService: MessageService,
        private confirmDeleteDialog: MatDialog) {
    }

    /**
     * When used as a 'sub' component (to display one-to-many list), refreshes the table
     * content when the input changes.
     */
    ngOnChanges(changes: SimpleChanges) {
        this.loadPage({ first: 0, rows: 10, sortField: null, sortOrder: null, filters: null, multiSortMeta: null });
    }

    /**
     * Invoked when user presses the search button.
     */
    search(dt: DataTable) {
        if (!this.sub) {
            dt.reset();
            this.loadPage({ first: 0, rows: dt.rows, sortField: dt.sortField, sortOrder: dt.sortOrder,
        filters: null, multiSortMeta: dt.multiSortMeta });
        }
    }

    /**
     * Invoked automatically by primeng datatable.
     */
    loadPage(event: LazyLoadEvent) {
        this.${entity.service.var}.getPage(this.example, event).
            subscribe(
                pageResponse => this.currentPage = pageResponse,
                error => this.messageService.error('Could not get the results', error)
            );
    }
## --------------- X to One
#foreach ($relation in $entity.forwardXToOne.list)
#if ($velocityCount == 1)

    // X to one: input param is used to filter the list when displayed
    // as a one-to-many list by the other side.
#end
    @Input()
    set ${relation.to.var}($relation.to.var: $relation.to.type) {
        if ($relation.to.var == null) {
            return;
        }
        this._$relation.to.var = $relation.to.var;

        this.example = new ${entity.model.type}();
        this.example.$relation.to.var = new ${relation.to.type}();
        this.example.${relation.to.var}.${identifiableProperty.var} = this._${relation.to.var}.${identifiableProperty.var};
    }

#end

    onRowSelect(event: any) {
#if($entity.hasCompositePk())
        const id = #foreach($a in $primaryKey.attributes)event.data.${identifiableProperty.var}.${a.var}#{if}($a.isDate()).toISOString().substring(0,19)#{end}#{if}($velocityHasNext) + '_' + #{else};#{end}

#{end}
#else
        const id =  event.data.${identifiableProperty.var};
#end
        this.router.navigate(['/${entity.model.var}', id]);
    }

    addNew() {
        if (this.sub) {
            this.addNewClicked.emit('addNew');
        } else {
            this.router.navigate(['/${entity.model.var}', 'new']);
        }
    }

    showDeleteDialog(rowData: any) {
        const ${entity.model.var}ToDelete: $entity.model.type = <$entity.model.type> rowData;

        const dialogRef = this.confirmDeleteDialog.open(ConfirmDeleteDialogComponent);
        dialogRef.afterClosed().subscribe(result => {
            if (result === 'delete') {
                this.delete(${entity.model.var}ToDelete);
            }
        });
    }

    private delete(${entity.model.var}ToDelete: $entity.model.type) {
#if($entity.hasCompositePk())
        const id = #foreach($a in $primaryKey.attributes)${entity.model.var}ToDelete.${identifiableProperty.var}.${a.var}#{if}($a.isDate()).toISOString().substring(0,19)#{end}#{if}($velocityHasNext) + '_' + #{else};#{end}#{end}

#else
        const id =  ${entity.model.var}ToDelete.${identifiableProperty.var};
#end

        this.${entity.service.var}.delete(id).
            subscribe(
                response => {
                    this.currentPage.remove(${entity.model.var}ToDelete);
                    this.messageService.info('Deleted OK', 'Angular Rocks!');
                },
                error => this.messageService.error('Could not delete!', error)
            );
    }
}
