$output.file("web/src/app/entities/${entity.model.var}/${entity.model.var}-detail.component.html")##
## -- [MACRO]
#macro(xToOneEdit $relation)
            <div class="ui-g-12 ui-md-2 ui-lg-1"><label for="$relation.to.var"#{if}($relation.isMandatory()) class="required"#{end}>${relation.labels.label}</label></div>
            <div class="ui-g-12 ui-md-10 ui-lg-5">
                <div class="ui-g">
                <div class="ui-g-12 ui-md-5 ui-lg-5">
                    <app-${relation.toEntity.model.var}-auto-complete [(ngModel)]="${entity.model.var}.${relation.to.var}" id="${relation.to.var}" name="${relation.to.var}" [disabled]="sub"></app-${relation.toEntity.model.var}-auto-complete>
                </div>
                <div class="ui-g-12 ui-md-2 ui-lg-2">
                    <button pButton id="goto${relation.to.varUp}" type="button" (click)="goto${relation.to.varUp}()" *ngIf="!sub && ${entity.model.var}.${relation.to.var}" icon="fa-pencil" label="Edit"></button>
                </div>
                <div class="ui-g-12 ui-md-2 ui-lg-2">
                    <button pButton id="clear${relation.to.varUp}" type="button" (click)="clear${relation.to.varUp}()" *ngIf="!sub && ${entity.model.var}.${relation.to.var}" icon="fa-chain-broken" label="Clear"></button>
                </div>
                </div>
            </div>
#end
#macro(required $attribute)
#if($attribute.isRequired()) required #end
#end
#macro(minlength $attribute)
#if($attribute.columnConfig.hasMin()) minlength="$attribute.columnConfig.min"#end
#end
#macro(requiredclass $attribute)
#if($attribute.isRequired()) class="required"#end
#end
#macro(mderror $attribute)

#if($attribute.isRequired())
                    <mat-error *ngIf="!${attribute.var}.valid && ${attribute.var}.dirty && ${attribute.var}.errors['required']">
                        $attribute.labels.label is required.
                    </mat-error>
#end
#if($attribute.columnConfig.hasMin() && $attribute.isString())
                    <mat-error *ngIf="!${attribute.var}.valid && ${attribute.var}.dirty && ${attribute.var}.errors['minlength']">
                        $attribute.labels.label must have at least $attribute.columnConfig.min characters.
                    </mat-error>
#end
#if($attribute.isEmail())
                    <mat-error *ngIf="!${attribute.var}.valid && ${attribute.var}.dirty && ${attribute.var}.errors['validateEmail']">
                        $attribute.labels.label is invalid. Expecting a valid email address.
                    </mat-error>
#end
#if($attribute.isUrl())
                    <mat-error *ngIf="!${attribute.var}.valid && ${attribute.var}.dirty && ${attribute.var}.errors['pattern']">
                        $attribute.labels.label is invalid. Expecting a valid URL.
                    </mat-error>
#end
#end
## -- [/MACROS]
    <mat-card *ngIf="$entity.model.var" ngForm #${entity.model.var}Form="ngForm">
        <mat-card-title>$entity.model.type Details</mat-card-title>
        <mat-card-content>
        <div class="ui-g alignlabels">
## ---------------------------------------------------------
#foreach($attr in $entity.formAttributes.flatUp.list)
#if ($attr.isSimplePk() && !$attr.jpa.isManuallyAssigned())
## no need to display it...
#elseif($attr.isSimpleFk())
#xToOneEdit($attr.getXToOneRelation())
#elseif(!$attr.isVersion())
#if($attr.isInCpk())
#set( $valuePath = "${entity.model.var}.${identifiableProperty.var}.${attr.var}")##
#else
#set( $valuePath = "$attr.fullVar")##
#end
                <div class="ui-g-12 ui-md-2 ui-lg-1"><label for="$attr.var" #requiredclass($attr)>$attr.labels.label</label></div>
#if($attr.springMvc.isPassword())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container style="width: 90%">
                    <input matInput type="password" [(ngModel)]="$valuePath" #required($attr) #minlength($attr) name="$attr.var" ${p}$attr.var="ngModel"/>
                    #mderror($attr)
                </mat-input-container>
#elseif($attr.isHtml())
                todo html
#elseif($attr.isTextArea())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container style="width: 90%">
                    <textarea matInput id="$attr.var" [(ngModel)]="$valuePath" #required($attr) #minlength($attr) autoResize="true" name="$attr.var" ${p}$attr.var="ngModel"></textarea>
                    #mderror($attr)
                </mat-input-container>
#elseif($attr.isEnum())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-select [(ngModel)]="$valuePath" name="$attr.var" ${p}$attr.var="ngModel" style="width: 90%">
                    <mat-option *ngFor="let ${attr.var}Option of ${attr.var}Options" [value]="${attr.var}Option.value">{{ ${attr.var}Option.label }}</mat-option>
                </mat-select>
#elseif($attr.isEmail())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container style="width: 90%">
                    <input matInput id="$attr.var" type="email" [(ngModel)]="$valuePath" #required($attr) #minlength($attr) validateEmail name="$attr.var" ${p}$attr.var="ngModel"/>
                    #mderror($attr)
                </mat-input-container>
#elseif($attr.isUrl())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container style="width: 90%">
                    <input matInput id="$attr.var" type="url" pattern="^http.*" [(ngModel)]="$valuePath" #required($attr) #minlength($attr) name="$attr.var" ${p}$attr.var="ngModel"/>
                    #mderror($attr)
                </mat-input-container>
#elseif($attr.isString())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container style="width: 90%">
                    <input matInput id="$attr.var" type="text" [(ngModel)]="$valuePath" #required($attr) #minlength($attr) name="$attr.var" ${p}$attr.var="ngModel"/>
                    #mderror($attr)
                </mat-input-container>
#elseif($attr.isNumeric())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container style="width: 90%">
                    <input matInput id="$attr.var" type="number" [(ngModel)]="$valuePath" #required($attr) name="$attr.var" ${p}$attr.var="ngModel" />
                    #mderror($attr)
                </mat-input-container>
#elseif($attr.isDate() && !$attr.isVersion())
#if($attr.isJavaUtilOnlyDate() || $attr.isLocalDate())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container>
                  <input matInput id="$attr.var" [matDatepicker]="${attr.var}Picker" [(ngModel)]="$valuePath" #required($attr) name="$attr.var" ${p}$attr.var="ngModel">
                  <mat-datepicker-toggle matSuffix [for]="${attr.var}Picker"></mat-datepicker-toggle>
                </mat-input-container>
                <mat-datepicker ${pound}${attr.var}Picker></mat-datepicker>
#elseif($attr.isLocalDateTime() || $attr.isInstant())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <p-calendar [(ngModel)]="$valuePath" dateFormat="yy-mm-dd" showTime="true" [ngModelOptions]="{standalone: true}"></p-calendar>
#else
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                Date type not supported, do it manually and send us the solution!
#end
#elseif($attr.isBoolean())
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <p-triStateCheckbox [(ngModel)]="$valuePath" name="$attr.var"></p-triStateCheckbox>{{$valuePath}}
#elseif($attr.isFile() && $attr.filename)
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <ul *ngIf="${entity.model.var}.${attr.filename.var}">
                    <li><a href="/api/${entity.model.vars}/{{${entity.model.var}.${identifiableProperty.var}}}/download/${attr.var}">Download {{${entity.model.var}.${attr.filename.var}}}</a></li>
                    <li>Content-Type: {{${entity.model.var}.${attr.fileContentType.var}}}</li>
                    <li>Size in bytes: {{${entity.model.var}.${attr.fileSize.var}}}</li>
                </ul>

                <p-fileUpload *ngIf="${entity.model.var}.${identifiableProperty.var}" name="${attr.var}" url="/api/${entity.model.vars}/{{${entity.model.var}.${identifiableProperty.var}}}/upload/${attr.var}" (onUpload)="on${attr.varUp}Upload(${d}event)" >
                </p-fileUpload>
                <p *ngIf="!${entity.model.var}.${identifiableProperty.var}">
                    Please save the form before being able to upload a file
                </p>
#else
                <div class="ui-g-12 ui-md-10 ui-lg-5">
                <mat-input-container style="width: 90%">
                    <input matInput id="$attr.var" type="text" [(ngModel)]="$valuePath" #required($attr) #minlength($attr) name="$attr.var" ${p}$attr.var="ngModel"/>
                    #mderror($attr)
                </mat-input-container>
#end
                </div>
#end ##---------- [/NON VERSION]
#end ## foreach(....
## ---------------------------------------------------------
        </div>
        </mat-card-content>
        <mat-card-actions>
            <button mat-raised-button *ngIf="sub" (click)="onCancel()"><mat-icon>cancel</mat-icon>Cancel</button>
            <button mat-raised-button (click)="onSave()" [disabled]="!${entity.model.var}Form.form.valid"><mat-icon>save</mat-icon>Save</button>
        </mat-card-actions>
    </mat-card>
##
## TABS FOR RELATIONS
##
#if($entity.inverseOneToOne.flatUp.size > 0 || $entity.oneToMany.flatUp.size > 0 || $entity.manyToMany.flatUp.size > 0)
    <br/>
    <mat-card *ngIf="$entity.model.var && ${entity.model.var}.$identifiableProperty.var">
    <mat-card-subtitle>$entity.model.type db relations</mat-card-subtitle>
    <mat-card-content>
    <mat-tab-group>
#end
#foreach ($relation in $entity.inverseOneToOne.flatUp.list)
        <mat-tab label="$relation.to.varsUp">
            <${relation.toEntity.model.var}-list [$relation.from.var]="${entity.model.var}" sub="true"></${relation.toEntity.model.var}-list>
        </mat-tab>
#end
#foreach ($relation in $entity.oneToMany.flatUp.list)
        <mat-tab label="$relation.to.varsUp">
            <${relation.toEntity.model.var}-list *ngIf="show$relation.to.varsUp" [$relation.from.var]="$entity.model.var" sub="true" [header]="'$relation.to.varsUp of this $entity.model.var'" (onAddNewClicked)="show$relation.to.varsUp = false"></${relation.toEntity.model.var}-list>
            <${relation.toEntity.model.var}-detail *ngIf="!show$relation.to.varsUp" [$relation.from.var]="$entity.model.var" sub="true" (onSaveClicked)="show$relation.to.varsUp = true" (onCancelClicked)="show$relation.to.varsUp = true"></${relation.toEntity.model.var}-detail>
        </mat-tab>
#end
#foreach ($relation in $entity.manyToMany.flatUp.list)
        <mat-tab label="$relation.to.varsUp">
            <p-pickList [source]="source$relation.to.varsUp" [target]="${entity.model.var}.$relation.to.vars" sourceHeader="Available" targetHeader="Selected" [responsive]="true">
                <ng-template let-$relation.to.var pTemplate="item">
#foreach($attr in $relation.toEntity.printerAttributes.flatUp.list){{ ${relation.to.var}.${attr.var} }} #end
                </ng-template>
            </p-pickList>
        </mat-tab>
#end

#if($entity.inverseOneToOne.flatUp.size > 0 || $entity.oneToMany.flatUp.size > 0 || $entity.manyToMany.flatUp.size > 0)
    </mat-tab-group>
    </mat-card-content>
    </mat-card>
#end
