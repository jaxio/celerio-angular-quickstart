$output.file("web/src/app/entities/${entity.model.var}/${entity.model.var}.service.ts")##
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { LazyLoadEvent } from 'primeng/primeng';
import { MessageService } from '../../service/message.service';
import { PageResponse, PageRequestByExample } from '../../support/paging';
import { ${entity.model.type} } from './${entity.model.var}';
import { Observable } from 'rxjs/Observable';
import { catchError, map } from 'rxjs/operators';
import 'rxjs/add/observable/throw';

@Injectable()
export class ${entity.service.type} {

    constructor(private http: HttpClient) {}

    /**
     * Get a $entity.model.type by id.
     */
    ${entity.model.getter}(id: any): Observable<$entity.model.type> {
        return this.http.get('/api/${entity.model.vars}/' + id)
            .pipe(
                map(response => new ${entity.model.type}(response)),
                catchError(MessageService.handleError)
            );
    }

    /**
     * Update the passed ${entity.model.var}.
     */
    update($entity.model.var: $entity.model.type): Observable<$entity.model.type> {
         return this.http.put('/api/$entity.model.vars/', $entity.model.var)
            .pipe(
                map(response => new ${entity.model.type}(response)),
                catchError(MessageService.handleError)
            );
    }

    /**
     * Load a page (for paginated datatable) of $entity.model.type using the passed
     * $entity.model.var as an example for the search by example facility.
     */
    getPage($entity.model.var: $entity.model.type, event: LazyLoadEvent): Observable<PageResponse<$entity.model.type>> {
        const body = new PageRequestByExample($entity.model.var, event);

        return this.http.post<PageResponse<any>>('/api/$entity.model.vars/page', body)
            .pipe(
                map(pr =>  new PageResponse<$entity.model.type>(pr.totalPages, pr.totalElements, ${entity.model.type}.toArray(pr.content))),
                catchError(MessageService.handleError)
            );
    }

    /**
     * Performs a search by example on 1 attribute (defined on server side) and returns at most 10 results.
     * Used by ${entity.model.type}CompleteComponent.
     */
    complete(query: string): Observable<${entity.model.type}[]> {
        const body = {query: query, maxResults: 10};
        return this.http.post<any[]>('/api/$entity.model.vars/complete', body)
            .pipe(
                map(response => ${entity.model.type}.toArray(response)),
                catchError(MessageService.handleError)
            );
    }

    /**
     * Delete an $entity.model.type by id.
     */
    delete(id: any) {
        return this.http.delete('/api/${entity.model.vars}/' + id)
            .pipe(catchError(MessageService.handleError));
    }

}
