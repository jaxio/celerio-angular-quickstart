/*
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.mycompany.myapp.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.mycompany.myapp.domain.Account;
import com.mycompany.myapp.domain.AlarmRule;
import com.mycompany.myapp.domain.AlarmRule_;
import com.mycompany.myapp.dto.support.PageRequestByExample;
import com.mycompany.myapp.dto.support.PageResponse;
import com.mycompany.myapp.repository.AccountRepository;
import com.mycompany.myapp.repository.AlarmRuleRepository;

/**
 * A simple DTO Facility for AlarmRule.
 */
@Service
public class AlarmRuleDTOService {

    @Inject
    private AlarmRuleRepository alarmRuleRepository;
    @Inject
    private AccountDTOService accountDTOService;
    @Inject
    private AccountRepository accountRepository;

    @Transactional(readOnly = true)
    public AlarmRuleDTO findOne(Long id) {
        return toDTO(alarmRuleRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<AlarmRuleDTO> complete(String query, int maxResults) {
        List<AlarmRule> results = alarmRuleRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<AlarmRuleDTO> findAll(PageRequestByExample<AlarmRuleDTO> req) {
        Example<AlarmRule> example = null;
        AlarmRule alarmRule = toEntity(req.example);

        if (alarmRule != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(AlarmRule_.emailToAlert.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(alarmRule, matcher);
        }

        Page<AlarmRule> page;
        if (example != null) {
            page = alarmRuleRepository.findAll(example, req.toPageable());
        } else {
            page = alarmRuleRepository.findAll(req.toPageable());
        }

        List<AlarmRuleDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public AlarmRuleDTO save(AlarmRuleDTO dto) {
        if (dto == null) {
            return null;
        }

        final AlarmRule alarmRule;

        if (dto.isIdSet()) {
            AlarmRule alarmRuleTmp = alarmRuleRepository.findOne(dto.id);
            if (alarmRuleTmp != null) {
                alarmRule = alarmRuleTmp;
            } else {
                alarmRule = new AlarmRule();
                alarmRule.setId(dto.id);
            }
        } else {
            alarmRule = new AlarmRule();
        }

        alarmRule.setAlarmType(dto.alarmType);

        alarmRule.setEmailToAlert(dto.emailToAlert);

        alarmRule.setHigh(dto.high);

        alarmRule.setLow(dto.low);

        if (dto.accountFk == null) {
            alarmRule.setAccountFk(null);
        } else {
            Account accountFk = alarmRule.getAccountFk();
            if (accountFk == null || (accountFk.getId().compareTo(dto.accountFk.id) != 0)) {
                alarmRule.setAccountFk(accountRepository.findOne(dto.accountFk.id));
            }
        }

        return toDTO(alarmRuleRepository.save(alarmRule));
    }

    /**
     * Converts the passed alarmRule to a DTO.
     */
    public AlarmRuleDTO toDTO(AlarmRule alarmRule) {
        return toDTO(alarmRule, 1);
    }

    /**
     * Converts the passed alarmRule to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param alarmRule
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public AlarmRuleDTO toDTO(AlarmRule alarmRule, int depth) {
        if (alarmRule == null) {
            return null;
        }

        AlarmRuleDTO dto = new AlarmRuleDTO();

        dto.id = alarmRule.getId();
        dto.alarmType = alarmRule.getAlarmType();
        dto.emailToAlert = alarmRule.getEmailToAlert();
        dto.high = alarmRule.getHigh();
        dto.low = alarmRule.getLow();
        if (depth-- > 0) {
            dto.accountFk = accountDTOService.toDTO(alarmRule.getAccountFk(), depth);
        }

        return dto;
    }

    /**
     * Converts the passed dto to a AlarmRule.
     * Convenient for query by example.
     */
    public AlarmRule toEntity(AlarmRuleDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a AlarmRule.
     * Convenient for query by example.
     */
    public AlarmRule toEntity(AlarmRuleDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        AlarmRule alarmRule = new AlarmRule();

        alarmRule.setId(dto.id);
        alarmRule.setAlarmType(dto.alarmType);
        alarmRule.setEmailToAlert(dto.emailToAlert);
        alarmRule.setHigh(dto.high);
        alarmRule.setLow(dto.low);
        if (depth-- > 0) {
            alarmRule.setAccountFk(accountDTOService.toEntity(dto.accountFk, depth));
        }

        return alarmRule;
    }
}