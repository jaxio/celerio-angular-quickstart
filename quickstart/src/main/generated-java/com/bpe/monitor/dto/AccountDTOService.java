/*
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.bpe.monitor.dto;

import java.util.List;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.bpe.monitor.domain.Account;
import com.bpe.monitor.domain.Account_;
import com.bpe.monitor.dto.support.PageRequestByExample;
import com.bpe.monitor.dto.support.PageResponse;
import com.bpe.monitor.repository.AccountRepository;

/**
 * A simple DTO Facility for Account.
 */
@Service
public class AccountDTOService {

    @Inject
    private AccountRepository accountRepository;

    @Transactional(readOnly = true)
    public AccountDTO findOne(Long id) {
        return toDTO(accountRepository.findOne(id));
    }

    @Transactional(readOnly = true)
    public List<AccountDTO> complete(String query, int maxResults) {
        List<Account> results = accountRepository.complete(query, maxResults);
        return results.stream().map(this::toDTO).collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
    public PageResponse<AccountDTO> findAll(PageRequestByExample<AccountDTO> req) {
        Example<Account> example = null;
        Account account = toEntity(req.example);

        if (account != null) {
            ExampleMatcher matcher = ExampleMatcher.matching() //
                    .withMatcher(Account_.email.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Account_.firstName.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Account_.lastName.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(Account_.password.getName(), match -> match.ignoreCase().startsWith());

            example = Example.of(account, matcher);
        }

        Page<Account> page;
        if (example != null) {
            page = accountRepository.findAll(example, req.toPageable());
        } else {
            page = accountRepository.findAll(req.toPageable());
        }

        List<AccountDTO> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    @Transactional
    public AccountDTO save(AccountDTO dto) {
        if (dto == null) {
            return null;
        }

        final Account account;

        if (dto.isIdSet()) {
            Account accountTmp = accountRepository.findOne(dto.id);
            if (accountTmp != null) {
                account = accountTmp;
            } else {
                account = new Account();
                account.setId(dto.id);
            }
        } else {
            account = new Account();
        }

        account.setEmail(dto.email);

        account.setFirstName(dto.firstName);

        account.setLastName(dto.lastName);

        account.setPassword(dto.password);

        return toDTO(accountRepository.save(account));
    }

    /**
     * Converts the passed account to a DTO.
     */
    public AccountDTO toDTO(Account account) {
        return toDTO(account, 1);
    }

    /**
     * Converts the passed account to a DTO. The depth is used to control the
     * amount of association you want. It also prevents potential infinite serialization cycles.
     *
     * @param account
     * @param depth the depth of the serialization. A depth equals to 0, means no x-to-one association will be serialized.
     *              A depth equals to 1 means that xToOne associations will be serialized. 2 means, xToOne associations of
     *              xToOne associations will be serialized, etc.
     */
    public AccountDTO toDTO(Account account, int depth) {
        if (account == null) {
            return null;
        }

        AccountDTO dto = new AccountDTO();

        dto.id = account.getId();
        dto.email = account.getEmail();
        dto.firstName = account.getFirstName();
        dto.lastName = account.getLastName();
        dto.password = account.getPassword();
        if (depth-- > 0) {
        }

        return dto;
    }

    /**
     * Converts the passed dto to a Account.
     * Convenient for query by example.
     */
    public Account toEntity(AccountDTO dto) {
        return toEntity(dto, 1);
    }

    /**
     * Converts the passed dto to a Account.
     * Convenient for query by example.
     */
    public Account toEntity(AccountDTO dto, int depth) {
        if (dto == null) {
            return null;
        }

        Account account = new Account();

        account.setId(dto.id);
        account.setEmail(dto.email);
        account.setFirstName(dto.firstName);
        account.setLastName(dto.lastName);
        account.setPassword(dto.password);
        if (depth-- > 0) {
        }

        return account;
    }
}