/*
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.bpe.monitor.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.bpe.monitor.domain.Account;
import com.bpe.monitor.dto.AccountDTO;
import com.bpe.monitor.dto.AccountDTOService;
import com.bpe.monitor.dto.support.PageRequestByExample;
import com.bpe.monitor.dto.support.PageResponse;
import com.bpe.monitor.repository.AccountRepository;
import com.bpe.monitor.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/accounts")
public class AccountResource {

    private final Logger log = LoggerFactory.getLogger(AccountResource.class);

    @Inject
    private AccountRepository accountRepository;
    @Inject
    private AccountDTOService accountDTOService;

    /**
     * Create a new Account.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<AccountDTO> create(@RequestBody AccountDTO accountDTO) throws URISyntaxException {

        log.debug("Create AccountDTO : {}", accountDTO);

        if (accountDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create Account with existing ID").body(null);
        }

        AccountDTO result = accountDTOService.save(accountDTO);

        return ResponseEntity.created(new URI("/api/accounts/" + result.id)).body(result);
    }

    /**
    * Find by id Account.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<AccountDTO> findById(@PathVariable Long id) throws URISyntaxException {

        log.debug("Find by id Account : {}", id);

        return Optional.ofNullable(accountDTOService.findOne(id)).map(accountDTO -> new ResponseEntity<>(accountDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update Account.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<AccountDTO> update(@RequestBody AccountDTO accountDTO) throws URISyntaxException {

        log.debug("Update AccountDTO : {}", accountDTO);

        if (!accountDTO.isIdSet()) {
            return create(accountDTO);
        }

        AccountDTO result = accountDTOService.save(accountDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of Account using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<AccountDTO>> findAll(@RequestBody PageRequestByExample<AccountDTO> prbe) throws URISyntaxException {
        PageResponse<AccountDTO> pageResponse = accountDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<AccountDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<AccountDTO> results = accountDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id Account.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Long id) throws URISyntaxException {

        log.debug("Delete by id Account : {}", id);

        try {
            accountRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}