/*
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Template pack-angular:src/main/java/rest/EntityResource.java.e.vm
 */
package com.bpe.monitor.rest;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
import static org.springframework.web.bind.annotation.RequestMethod.DELETE;
import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;
import static org.springframework.web.bind.annotation.RequestMethod.PUT;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestBody;

import com.bpe.monitor.domain.AlarmReading;
import com.bpe.monitor.dto.AlarmReadingDTO;
import com.bpe.monitor.dto.AlarmReadingDTOService;
import com.bpe.monitor.dto.support.PageRequestByExample;
import com.bpe.monitor.dto.support.PageResponse;
import com.bpe.monitor.repository.AlarmReadingRepository;
import com.bpe.monitor.rest.support.AutoCompleteQuery;

@RestController
@RequestMapping("/api/alarmReadings")
public class AlarmReadingResource {

    private final Logger log = LoggerFactory.getLogger(AlarmReadingResource.class);

    @Inject
    private AlarmReadingRepository alarmReadingRepository;
    @Inject
    private AlarmReadingDTOService alarmReadingDTOService;

    /**
     * Create a new AlarmReading.
     */
    @RequestMapping(value = "/", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<AlarmReadingDTO> create(@RequestBody AlarmReadingDTO alarmReadingDTO) throws URISyntaxException {

        log.debug("Create AlarmReadingDTO : {}", alarmReadingDTO);

        if (alarmReadingDTO.isIdSet()) {
            return ResponseEntity.badRequest().header("Failure", "Cannot create AlarmReading with existing ID").body(null);
        }

        AlarmReadingDTO result = alarmReadingDTOService.save(alarmReadingDTO);

        return ResponseEntity.created(new URI("/api/alarmReadings/" + result.id)).body(result);
    }

    /**
    * Find by id AlarmReading.
    */
    @RequestMapping(value = "/{id}", method = GET, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<AlarmReadingDTO> findById(@PathVariable Long id) throws URISyntaxException {

        log.debug("Find by id AlarmReading : {}", id);

        return Optional.ofNullable(alarmReadingDTOService.findOne(id)).map(alarmReadingDTO -> new ResponseEntity<>(alarmReadingDTO, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * Update AlarmReading.
     */
    @RequestMapping(value = "/", method = PUT, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<AlarmReadingDTO> update(@RequestBody AlarmReadingDTO alarmReadingDTO) throws URISyntaxException {

        log.debug("Update AlarmReadingDTO : {}", alarmReadingDTO);

        if (!alarmReadingDTO.isIdSet()) {
            return create(alarmReadingDTO);
        }

        AlarmReadingDTO result = alarmReadingDTOService.save(alarmReadingDTO);

        return ResponseEntity.ok().body(result);
    }

    /**
     * Find a Page of AlarmReading using query by example.
     */
    @RequestMapping(value = "/page", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<PageResponse<AlarmReadingDTO>> findAll(@RequestBody PageRequestByExample<AlarmReadingDTO> prbe) throws URISyntaxException {
        PageResponse<AlarmReadingDTO> pageResponse = alarmReadingDTOService.findAll(prbe);
        return new ResponseEntity<>(pageResponse, new HttpHeaders(), HttpStatus.OK);
    }

    /**
    * Auto complete support.
    */
    @RequestMapping(value = "/complete", method = POST, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<AlarmReadingDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {

        List<AlarmReadingDTO> results = alarmReadingDTOService.complete(acq.query, acq.maxResults);

        return new ResponseEntity<>(results, new HttpHeaders(), HttpStatus.OK);
    }

    /**
     * Delete by id AlarmReading.
     */
    @RequestMapping(value = "/{id}", method = DELETE, produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<Void> delete(@PathVariable Long id) throws URISyntaxException {

        log.debug("Delete by id AlarmReading : {}", id);

        try {
            alarmReadingRepository.delete(id);
            return ResponseEntity.ok().build();
        } catch (Exception x) {
            // todo: dig exception, most likely org.hibernate.exception.ConstraintViolationException
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
    }
}